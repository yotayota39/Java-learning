Javaの学習
・Javaの強み（？）
　マルチプラットフォームでの稼動
　ソフトウェアの高い開発生産性（？）
　安全なコード
　豊富なライブラリやプログラマの練度の高さ


学習対象案
・Javaバッチ
・JUnit+Excel
・Javaフレームワークの何か

■Javaバッチ
　Javaでバッチを作るメリット
　・一般的なバッチはCOBOLやシェルを使うが、技術者が少ない
　・Java技術者が増えているので開発・保守要員の確保がしやすい。システムとの連携もしやすい
　・基幹システムを再構築するとき、プラットフォームに依存しないので移行しやすい
　・複雑な処理向き（帳票・画像・暗号化・統計・通信）
　・マルチスレッドとかオブジェクト指向とかもいける。
　
　Javaで作るデメリット
　・JVM上で稼動するため、オーバーヘッドが生じて性能劣化。
　・大量データを処理する場合はJVMが管理するメモリ空間を考慮する必要もある
　
　Javaの性能問題の対処
　・JVM常駐化
　　起動のオバヘをなくしたりキャッシュしたり
　・ステップ間パイプ機能（？）
　　中間ファイルを作らずに、ステップ間をBlockingQueueとしてデータ連携
　・外部コマンド呼出
　　ボトルネックを外部コマンドまたはJava Native Interfaceとして呼び出す（？）
　・byte配列処理機能
　　フラットファイル入出力処理（？）Unicodeをbyte配列のまま扱う
　
　Javaバッチのフレームワーク
　・Spring Batch
　・jBatch
　　バッチシステムを作るためのAPIを提供する。
　　機能
　　　・順序制御
　　　・チェックポイント（トランザクション）
　　　・スキップ処理（DBのInsertエラーを飛ばす）
　参考文献
　ほとんど： https://www.nri.com/jp/opinion/g_souhatsu/pdf/2013/gs201302.pdf
　jBatchとか： http://builder.japan.zdnet.com/sp_oracle/weblogic_2013/35038499/2/
　あとで読む： http://www.atmarkit.co.jp/fjava/index/index_javabatch.html
